{"version":3,"sources":["components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","utils/index.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","fields","map","row","rowIdx","column","colIdx","Button","status","onStart","onStop","onRestart","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","OppositeDirection","Delta","timer","undefined","unsubscribe","console","log","clearInterval","App","useState","setFields","index","body","setBody","setStatus","direction","setDirection","setDifficulty","tick","setTick","useEffect","setInterval","handleMoving","onChangeDirection","useCallback","newDirection","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","position","delta","newPosition","isEatingMyself","newBody","removingTrack","pop","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.73f6b47e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navigation = ({ length, difficulty, onChangeDifficulty }) => {\n  const upVisibility = difficulty < 5 ? '' : 'is-hidden';\n  const downVisibility = difficulty > 1 ? '' : 'is-hidden';\n  const onUpDifficulty = () => onChangeDifficulty(difficulty + 1);\n  const onDownDifficulty = () => onChangeDifficulty(difficulty - 1);\n  return (\n    <div className=\"navigation\">\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Length: </span>\n        <div className=\"navigation-item-number-container\">\n          <div className=\"num-board\">{length}</div>\n        </div>\n      </div>\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Difficulty: </span>\n        <div className=\"navigation-item-number-container\">\n          <span className=\"num-board\">{difficulty}</span>\n          <div className=\"difficulty-button-container\">\n            <div\n              className={`difficulty-button difficulty-up ${upVisibility}`}\n              onClick={onUpDifficulty}\n            ></div>\n            <div\n              className={`difficulty-button difficulty-down ${downVisibility}`}\n              onClick={onDownDifficulty}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nconst Field = ({ fields }) => {\n  return (\n    <div className=\"field\">\n      {fields.map((row, rowIdx) => {\n        return row.map((column, colIdx) => {\n          return <div key={`row=${rowIdx}col=${colIdx}`} className={`dots ${column}`}></div>;\n        });\n      })}\n    </div>\n  );\n};\n\nexport default Field;\n","import React from 'react';\n\nconst Button = ({ status, onStart, onStop, onRestart }) => {\n  return (\n    <div className=\"button\">\n      {/* {status === 'gameover' ? (\n        <button onClick={onRestart}>gameover</button>\n      ) : (\n        <button onClick={onStart}>start</button>\n      )} */}\n      {status === 'gameover' && <button className=\"btn btn-gameover\" onClick={onRestart}>gameover</button>}\n      {status === 'init' && <button className=\"btn btn-init\" onClick={onStart}>start</button>}\n      {status === 'suspended' && <button className=\"btn btn-suspended\" onClick={onStart}>start</button>}\n      {status === 'playing' && <button className=\"btn btn-playing\" onClick={onStop}>stop</button>}\n    </div>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faArrowLeft,\n  faArrowUp,\n  faArrowDown,\n  faArrowRight,\n} from '@fortawesome/free-solid-svg-icons';\n\nconst ManipulationPanel = ({ onChange }) => {\n  const onUp = () => onChange('up');\n  const onRight = () => onChange('right');\n  const onLeft = () => onChange('left');\n  const onDown = () => onChange('down');\n\n  return (\n    <div className=\"manipulation-panel\">\n      <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n        <FontAwesomeIcon icon={faArrowLeft} />\n      </button>\n      <div>\n        <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n          <FontAwesomeIcon icon={faArrowUp} />\n        </button>\n        <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n          <FontAwesomeIcon icon={faArrowDown} />\n        </button>\n      </div>\n      <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n        <FontAwesomeIcon icon={faArrowRight} />\n      </button>\n    </div>\n  );\n};\n\nexport default ManipulationPanel;\n","export const getFoodPosition = (fieldSize, excludes) => {\n  while (true) {\n    const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const conflict = excludes.some((item) => item.x === x && item.y === y);\n    if (!conflict) {\n      return { x, y };\n    }\n  }\n};\n\nexport const initFields = (fieldSize, snake) => {\n  const fields = [];\n  for (let i = 0; i < fieldSize; i++) {\n    const cols = new Array(fieldSize).fill('');\n    fields.push(cols);\n  }\n  fields[snake.y][snake.x] = 'snake';\n\n  const food = getFoodPosition(fieldSize, [snake]);\n  fields[food.y][food.x] = 'food';\n\n  return fields;\n};\n","import React, { useCallback, useEffect, useState, useReducer } from 'react';\nimport Navigation from './components/Navigation';\nimport Field from './components/Field';\nimport Button from './components/Button';\nimport ManipulationPanel from './components/ManipulationPanel';\nimport { initFields, getFoodPosition } from './utils';\nimport { findDOMNode } from 'react-dom';\n\nconst initialPosition = { x: 17, y: 17 };\nconst initialValues = initFields(35, initialPosition);\nconst defaultInterval = 100;\nconst defaultDifficulty = 3;\nconst Difficulty = [1000, 500, 100, 50, 10];\nconst GameStatus = Object.freeze({\n  init: 'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover',\n});\nconst Direction = Object.freeze({\n  up: 'up',\n  right: 'right',\n  left: 'left',\n  down: 'down',\n});\nconst DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n});\nconst OppositeDirection = Object.freeze({\n  up: 'down',\n  right: 'left',\n  left: 'right',\n  down: 'up',\n});\nconst Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n});\nlet timer = undefined;\nconst unsubscribe = () => {\n  if (!timer) {\n    return;\n  }\n  console.log('unsubscribe');\n  clearInterval(timer);\n};\n\nconst isCollision = (fieldSize, position) => {\n  if (position.y < 0 || position.x < 0) {\n    return true;\n  }\n  if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n  return false;\n};\n\nconst isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === 'snake';\n};\n\n// const reducer = (state, action) => {\n//   const { position, fields, direction, status } = state;\n//   switch (action.type) {\n//     case 'tick':\n//       if (status !== GameStatus.playing) {\n//         return state;\n//       }\n\n//       const { x, y } = position;\n//       const delta = Delta[direction];\n//       const newPosition = {\n//         x: x + delta.x,\n//         y: y + delta.y,\n//       };\n//       if (isCollision(fields.length, newPosition)) {\n//         unsubscribe();\n//         return { ...state, status: GameStatus.gameover };\n//       }\n//       const newFields = [...fields];\n//       newFields[y][x] = '';\n//       newFields[newPosition.y][newPosition.x] = 'snake';\n//       return { ...state, position: newPosition, fields: newFields };\n\n//     case 'start':\n//       return {\n//         ...state,\n//         status: GameStatus.playing,\n//       };\n\n//     case 'restart':\n//       return {\n//         position: initialPosition,\n//         fields: initFields(35, initialPosition),\n//         status: GameStatus.init,\n//         direction: Direction.up,\n//       };\n\n//     case 'changeDirection':\n//       if (status !== GameStatus.playing) {\n//         return status;\n//       }\n//       if (OppositeDirection[direction] === action.direction) {\n//         return status;\n//       }\n//       return {\n//         ...state,\n//         direction: action.direction,\n//       };\n//     default:\n//       throw new Error();\n//   }\n// };\n\nfunction App() {\n  const [fields, setFields] = useState(initialValues);\n  // const [body, setBody] = useState([initialPosition]);\n  const [body, setBody] = useState(\n    new Array(15).fill('').map((item, index) => ({ x: 17, y: 17 + index }))\n  );\n  // const [state, dispatch] = useReducer(reducer, {\n  //   position: initialPosition,\n  //   fields: initialValues,\n  //   status: GameStatus.init,\n  //   direction: Direction.up,\n  // });\n  const [status, setStatus] = useState(GameStatus.init);\n  const [direction, setDirection] = useState(Direction.up);\n  const [difficulty, setDifficulty] = useState(defaultDifficulty);\n  const [tick, setTick] = useState(0);\n\n  useEffect(() => {\n    // setPosition(initialPosition);\n    // ゲームの中の時間を管理する\n    const interval = Difficulty[difficulty - 1];\n    timer = setInterval(() => {\n      setTick((tick) => tick + 1);\n      // dispatch({ type: 'tick' });\n    }, interval);\n    return unsubscribe;\n  }, [difficulty]);\n\n  useEffect(() => {\n    // if (!position) {\n    //   return;\n    // }\n    if (status !== GameStatus.playing) {\n      return;\n    }\n    const canContinue = handleMoving();\n    if (!canContinue) {\n      setStatus(GameStatus.gameover);\n    }\n  }, [tick]);\n\n  const onStart = () => setStatus(GameStatus.playing);\n  // const onStart = () => dispatch({ type: 'start' });\n\n  const onStop = () => setStatus(GameStatus.suspended);\n\n  const onRestart = () => {\n    timer = setInterval(() => {\n      setTick((tick) => tick + 1);\n      // dispatch({ type: 'tick' });\n    }, defaultInterval);\n    setStatus(GameStatus.init);\n    setBody([initialPosition]);\n    setDirection(Direction.up);\n    setFields(initFields(35, initialPosition));\n    // dispatch({ type: 'restart' });\n  };\n\n  const onChangeDirection = useCallback(\n    (newDirection) => {\n      if (status !== GameStatus.playing) {\n        return;\n      }\n      if (OppositeDirection[direction] === newDirection) {\n        return;\n      }\n      setDirection(newDirection);\n      // dispatch({ type: 'changeDirection', direction: newDirection });\n    },\n    [direction, status]\n  );\n\n  const onChangeDifficulty = useCallback(\n    (difficulty) => {\n      if (status !== GameStatus.init) {\n        return;\n      }\n      if (difficulty < 1 || difficulty > Difficulty.length) {\n        return;\n      }\n      setDifficulty(difficulty);\n    },\n    [status, difficulty]\n  );\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      const newDirection = DirectionKeyCodeMap[e.keyCode];\n      if (!newDirection) {\n        return;\n      }\n      // dispatch({ type: 'changeDirection', direction: newDirection });\n      onChangeDirection(newDirection);\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [onChangeDirection]);\n\n  const handleMoving = () => {\n    const { x, y } = body[0];\n    const delta = Delta[direction];\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y,\n    };\n    if (\n      isCollision(fields.length, newPosition) ||\n      isEatingMyself(fields, newPosition)\n    ) {\n      unsubscribe();\n      return false;\n    }\n    const newBody = [...body];\n    if (fields[newPosition.y][newPosition.x] !== 'food') {\n      const removingTrack = newBody.pop();\n      fields[removingTrack.y][removingTrack.x] = '';\n    } else {\n      const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n      fields[food.y][food.x] = 'food';\n    }\n    fields[newPosition.y][newPosition.x] = 'snake';\n    newBody.unshift(newPosition);\n    setBody(newBody);\n    setFields(fields);\n    return true;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={onChangeDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStart={onStart}\n          onStop={onStop}\n          onRestart={onRestart}\n        />\n        <ManipulationPanel onChange={onChangeDirection} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}