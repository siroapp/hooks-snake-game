{"version":3,"sources":["utils/index.js","constants/index.js","components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","hooks/useSnakeGame.js","App.js","reportWebVitals.js","index.js"],"names":["getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","fields","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","OppositeDirection","Delta","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","map","row","rowIdx","column","colIdx","Button","status","onStart","onStop","onRestart","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","timer","undefined","unsubscribe","clearInterval","reducer","state","action","body","direction","type","delta","newPosition","position","isCollision","isEatingMyself","newBody","newFields","removingTrack","pop","unshift","Error","useSnakeGame","useReducer","dispatch","useEffect","interval","setInterval","handleKeyDown","e","newDirection","keyCode","document","addEventListener","removeEventListener","start","stop","reload","updateDirection","updateDifficulty","newDifficulty","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.481cee61.chunk.js","sourcesContent":["export const getFoodPosition = (fieldSize, excludes) => {\n  while (true) {\n    const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const conflict = excludes.some((item) => item.x === x && item.y === y);\n    if (!conflict) {\n      return { x, y };\n    }\n  }\n};\n\nexport const initFields = (fieldSize, snake) => {\n  const fields = [];\n  for (let i = 0; i < fieldSize; i++) {\n    const cols = new Array(fieldSize).fill('');\n    fields.push(cols);\n  }\n  fields[snake.y][snake.x] = 'snake';\n\n  const food = getFoodPosition(fieldSize, [snake]);\n  fields[food.y][food.x] = 'food';\n\n  return fields;\n};\n\nexport const isCollision = (fieldSize, position) => {\n  if (position.y < 0 || position.x < 0) {\n    return true;\n  }\n  if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === 'snake';\n};\n","import { initFields } from '../utils';\n\nconst fieldSize = 35;\nexport const initialPosition = { x: 17, y: 17 };\nexport const initialValues = initFields(fieldSize, initialPosition);\nexport const defaultInterval = 100;\nexport const defaultDifficulty = 3;\nexport const Difficulty = [1000, 500, 100, 50, 10];\n\nexport const GameStatus = Object.freeze({\n  init: 'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover',\n});\n\nexport const Direction = Object.freeze({\n  up: 'up',\n  right: 'right',\n  left: 'left',\n  down: 'down',\n});\n\nexport const DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n});\n\nexport const OppositeDirection = Object.freeze({\n  up: 'down',\n  right: 'left',\n  left: 'right',\n  down: 'up',\n});\n\nexport const Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n});","import React from 'react';\nimport { Difficulty } from '../constants';\n\nconst Navigation = ({ length, difficulty, onChangeDifficulty }) => {\n  const upVisibility = difficulty < Difficulty.length ? '' : 'is-hidden';\n  const downVisibility = difficulty > 1 ? '' : 'is-hidden';\n  const onUpDifficulty = () => onChangeDifficulty(difficulty + 1);\n  const onDownDifficulty = () => onChangeDifficulty(difficulty - 1);\n  return (\n    <div className=\"navigation\">\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Length: </span>\n        <div className=\"navigation-item-number-container\">\n          <div className=\"num-board\">{length}</div>\n        </div>\n      </div>\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Difficulty: </span>\n        <div className=\"navigation-item-number-container\">\n          <span className=\"num-board\">{difficulty}</span>\n          <div className=\"difficulty-button-container\">\n            <div\n              className={`difficulty-button difficulty-up ${upVisibility}`}\n              onClick={onUpDifficulty}\n            ></div>\n            <div\n              className={`difficulty-button difficulty-down ${downVisibility}`}\n              onClick={onDownDifficulty}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nconst Field = ({ fields }) => {\n  return (\n    <div className=\"field\">\n      {fields.map((row, rowIdx) => {\n        return row.map((column, colIdx) => {\n          return <div key={`row=${rowIdx}col=${colIdx}`} className={`dots ${column}`}></div>;\n        });\n      })}\n    </div>\n  );\n};\n\nexport default Field;\n","import React from 'react';\nimport { GameStatus } from '../constants';\n\nconst Button = ({ status, onStart, onStop, onRestart }) => {\n  return (\n    <div className=\"button\">\n      {status === GameStatus.gameover && <button className=\"btn btn-gameover\" onClick={onRestart}>gameover</button>}\n      {status === GameStatus.init && <button className=\"btn btn-init\" onClick={onStart}>start</button>}\n      {status === GameStatus.suspended && <button className=\"btn btn-suspended\" onClick={onStart}>start</button>}\n      {status === GameStatus.playing && <button className=\"btn btn-playing\" onClick={onStop}>stop</button>}\n    </div>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faArrowLeft,\n  faArrowUp,\n  faArrowDown,\n  faArrowRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport { Direction } from '../constants';\n\nconst ManipulationPanel = ({ onChange }) => {\n  const onUp = () => onChange(Direction.up);\n  const onRight = () => onChange(Direction.right);\n  const onLeft = () => onChange(Direction.left);\n  const onDown = () => onChange(Direction.down);\n  return (\n    <div className=\"manipulation-panel\">\n      <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n        <FontAwesomeIcon icon={faArrowLeft} />\n      </button>\n      <div>\n        <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n          <FontAwesomeIcon icon={faArrowUp} />\n        </button>\n        <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n          <FontAwesomeIcon icon={faArrowDown} />\n        </button>\n      </div>\n      <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n        <FontAwesomeIcon icon={faArrowRight} />\n      </button>\n    </div>\n  );\n};\n\nexport default ManipulationPanel;\n","import { useEffect, useReducer } from 'react';\nimport {\n  defaultDifficulty,\n  Delta,\n  Difficulty,\n  Direction,\n  DirectionKeyCodeMap,\n  GameStatus,\n  OppositeDirection,\n  initialPosition,\n  initialValues,\n} from '../constants';\nimport {\n  initFields,\n  isCollision,\n  getFoodPosition,\n  isEatingMyself,\n} from '../utils';\n\nlet timer = undefined;\nconst unsubscribe = () => {\n  if (!timer) {\n    return;\n  }\n  clearInterval(timer);\n};\n\nconst reducer = (state, action) => {\n  const { body, fields, status, direction } = state;\n  switch (action.type) {\n    case 'move':\n      if (status !== GameStatus.playing) {\n        return state;\n      }\n      const { x, y } = body[0];\n      const delta = Delta[direction];\n      const newPosition = {\n        x: x + delta.x,\n        y: y + delta.y,\n      };\n      if (\n        isCollision(fields.length, newPosition) ||\n        isEatingMyself(fields, newPosition)\n      ) {\n        // unsubscribe();\n        return { ...state, status: GameStatus.gameover };\n      }\n      const newBody = [...body];\n      const newFields = [...fields];\n      if (newFields[newPosition.y][newPosition.x] !== 'food') {\n        const removingTrack = newBody.pop();\n        newFields[removingTrack.y][removingTrack.x] = '';\n      } else {\n        const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n        newFields[food.y][food.x] = 'food';\n      }\n      newFields[newPosition.y][newPosition.x] = 'snake';\n      newBody.unshift(newPosition);\n      return {\n        ...state,\n        body: newBody,\n        fields: newFields,\n      };\n\n    case 'changeDirection':\n      if (status !== GameStatus.playing) {\n        return state;\n      }\n      if (OppositeDirection[direction] === action.direction) {\n        return state;\n      }\n      return { ...state, direction: action.direction };\n\n    case 'start':\n      return { ...state, status: GameStatus.playing };\n\n    case 'stop':\n      return { ...state, status: GameStatus.suspended };\n\n    case 'reset':\n      return {\n        ...state,\n        body: [initialPosition],\n        fields: initFields(35, initialPosition),\n        status: GameStatus.init,\n        direction: Direction.up,\n      };\n\n    case 'changeDifficulty':\n      if (status !== GameStatus.init) {\n        return state;\n      }\n      if (action.difficulty < 1 || action.difficulty > Difficulty.length) {\n        return state;\n      }\n      return { ...state, difficulty: action.difficulty };\n\n    default:\n      throw new Error();\n  }\n};\n\nconst useSnakeGame = () => {\n  const [state, dispatch] = useReducer(reducer, {\n    body: [initialPosition],\n    fields: initialValues,\n    status: GameStatus.init,\n    direction: Direction.up,\n    difficulty: defaultDifficulty,\n  });\n\n  useEffect(() => {\n    const interval = Difficulty[state.difficulty - 1];\n    timer = setInterval(() => {\n      dispatch({ type: 'move' });\n    }, interval);\n    return unsubscribe;\n  }, [state.difficulty]);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      const newDirection = DirectionKeyCodeMap[e.keyCode];\n      if (!newDirection) {\n        return;\n      }\n      dispatch({ type: 'changeDirection', direction: newDirection });\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  const onStart = () => dispatch({ type: 'start' });\n  const onStop = () => dispatch({ type: 'stop' });\n  const onRestart = () => dispatch({ type: 'reset' });\n  const onChangeDirection = (newDirection) =>\n    dispatch({ type: 'changeDirection', direction: newDirection });\n  const onChangeDifficulty = (newDifficulty) =>\n    dispatch({ type: 'changeDifficulty', difficulty: newDifficulty });\n\n  return {\n    body: state.body,\n    difficulty: state.difficulty,\n    fields: state.fields,\n    status: state.status,\n    start: onStart,\n    stop: onStop,\n    reload: onRestart,\n    updateDirection: onChangeDirection,\n    updateDifficulty: onChangeDifficulty,\n  };\n};\n\nexport default useSnakeGame;\n","import React from 'react';\nimport Navigation from './components/Navigation';\nimport Field from './components/Field';\nimport Button from './components/Button';\nimport ManipulationPanel from './components/ManipulationPanel';\nimport useSnakeGame from './hooks/useSnakeGame';\n\nfunction App() {\n  const {\n    body,\n    difficulty,\n    fields,\n    start,\n    stop,\n    reload,\n    status,\n    updateDirection,\n    updateDifficulty,\n  } = useSnakeGame();\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={updateDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStart={start}\n          onStop={stop}\n          onRestart={reload}\n        />\n        <ManipulationPanel onChange={updateDirection} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}